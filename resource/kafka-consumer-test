@SpringBootApplication
public class KafkaConsumerGroupTestApp {
    private static final String TOPIC_NAME = "single-partition-topic";
    private static final String GROUP_ID = "test-group";

    public static void main(String[] args) {
        SpringApplication.run(KafkaConsumerGroupTestApp.class, args);
    }

    @Bean
    public NewTopic singlePartitionTopic() {
        return TopicBuilder.name(TOPIC_NAME)
                .partitions(1)
                .replicas(1)
                .build();
    }

    @Bean
    public ConsumerFactory<String, String> consumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.GROUP_ID_CONFIG, GROUP_ID);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        return new DefaultKafkaConsumerFactory<>(props);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }

    @KafkaListener(topics = TOPIC_NAME, groupId = GROUP_ID, id = "consumer1")
    public void listen1(String message) {
        System.out.println("Consumer 1 received: " + message);
    }

    @KafkaListener(topics = TOPIC_NAME, groupId = GROUP_ID, id = "consumer2")
    public void listen2(String message) {
        System.out.println("Consumer 2 received: " + message);
    }

    @Bean
    public ApplicationRunner runner(KafkaTemplate<String, String> template) {
        return args -> {
            for (int i = 0; i < 10; i++) {
                template.send(TOPIC_NAME, "Message " + i);
            }
        };
    }
}
